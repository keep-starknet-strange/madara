[package]
name = "pallet-starknet"
version.workspace = true
edition.workspace = true
description = "FRAME pallet to execute Starknet contracts."
authors = ["Abdelhamid Bakhta <@abdelhamidbakhta>"]
homepage = "https://github.com/keep-starknet-strange/madara"
license = "MIT"
publish = false
repository = "https://github.com/keep-starknet-strange/madara"


[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
# Madara primitives
mp-block = { workspace = true }
mp-chain-id = { workspace = true }
mp-digest-log = { workspace = true }
mp-fee = { workspace = true }
mp-felt = { workspace = true, features = ["parity-scale-codec", "serde"] }
mp-genesis-config = { workspace = true }
mp-hashers = { workspace = true }
mp-program-hash = { workspace = true }
mp-sequencer-address = { workspace = true, features = ["parity-scale-codec"] }
mp-simulations = { workspace = true, features = [
  "parity-scale-codec",
  "scale-info",
] }
mp-snos-output = { workspace = true, features = [
  "parity-scale-codec",
  "scale-info",
] }
mp-state = { workspace = true }
mp-storage = { workspace = true, features = ["parity-scale-codec"] }
mp-transactions = { workspace = true, features = ["scale-info"] }

blockifier = { workspace = true, features = [
  "testing",
  "parity-scale-codec",
  "scale-info",
] }
starknet-core = { workspace = true }
starknet-crypto = { workspace = true, features = ["alloc"] }
starknet-ff = { workspace = true }
starknet_api = { workspace = true, features = [
  "scale-info",
  "parity-scale-codec",
] }

# Substrate frame
frame-benchmarking = { workspace = true, optional = true }
frame-support = { workspace = true }
frame-system = { workspace = true }
# Substrate Client
sc-cli = { workspace = true, optional = true }
# substrate service
sc-client-api = { workspace = true }
sc-service = { workspace = true }
# Substrate primitives
sp-api = { workspace = true }
sp-arithmetic = { workspace = true }
sp-core = { workspace = true }
sp-inherents = { workspace = true }
sp-io = { workspace = true }
sp-runtime = { workspace = true }
sp-std = { workspace = true }
# Frame pallets

# Other third party dependencies
cairo-lang-casm-contract-class = { workspace = true, optional = true, features = [
  "std",
] }
derive_more = { workspace = true }
hashbrown = { workspace = true }
hex = { workspace = true }
indexmap = { workspace = true }
log = { workspace = true }
parity-scale-codec = { workspace = true, features = ["derive"] }
reqwest = { workspace = true, optional = true, features = [
  "blocking",
  "rustls-tls",
] }
scale-info = { workspace = true, features = ["derive"] }
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true }
serde_with = { workspace = true }

[dev-dependencies]
pallet-timestamp = { workspace = true }
pretty_assertions = { workspace = true }
test-case = "3.1.0"
lazy_static = "1.4.0"
hexlit = "0.5.5"
assert_matches = "1.5.0"
starknet-ff = { workspace = true }
project-root = "0.2.2"

[features]
default = ["std"]
std = [
  # Substrate
  "frame-support/std",
  "frame-system/std",
  "sc-cli",
  "sp-io/std",
  "sp-runtime/std",
  "frame-benchmarking?/std",
  "scale-info/std",
  "pallet-timestamp/std",
  "sp-inherents/std",
  # Starknet
  "starknet-crypto/std",
  "blockifier/std",
  "mp-felt/std",
  "mp-sequencer-address/std",
  # Other third party dependencies
  "dep:reqwest",
  "dep:cairo-lang-casm-contract-class",
  "parity-scale-codec/std",
  "starknet-core/std",
  "mp-simulations/std",
]
runtime-benchmarks = ["frame-benchmarking/runtime-benchmarks"]
try-runtime = ["frame-support/try-runtime"]
